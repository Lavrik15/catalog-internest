{"version":3,"sources":["components/Sort/Sort.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Sort","_ref","changeSort","onChangeInput","react_default","a","createElement","className","Input","action","icon","placeholder","onChange","e","Button","role","onClick","type","min","sortGoods","none","list","title","sortBy","o","data","price","discount","TableContent","goods","sortType","isReverseOff","searchValue","filteredGoods","reverse","filter","item","toLowerCase","includes","Table","celled","Header","Row","HeaderCell","Body","map","key","id","Cell","src","base_url","alt","Footer","colSpan","Menu","floated","pagination","Item","as","Icon","name","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setGoods","bind","assertThisInitialized","fetchGoods","_this2","axios","method","url","timeout","then","result","catch","error","setState","value","target","_this$state","components_Sort_Sort","components_Table_Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WA2CeA,UAvCF,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,WAAYC,EAAmBF,EAAnBE,cACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,OAAQ,CAAEC,KAAM,UAChBC,YAAY,iCACZJ,UAAU,eACVK,SAAU,SAACC,GAAD,OAAOV,EAAcU,MAEtCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIP,UAAU,iBACVQ,KAAK,SACLC,QAAS,kBAAMd,EAAW,WAE1BE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAEjBH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIP,UAAU,iBACVQ,KAAK,SACLC,QAAS,kBAAMd,EAAW,WAE1BE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAEjBH,EAAAC,EAAAC,cAAA,UACIC,UAAU,iBACVQ,KAAK,SACLC,QAAS,kBAAMd,EAAW,cAE1BE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAGrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOS,KAAK,SAASC,IAAI,IAAIP,YAAY,6CACzCP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOS,KAAK,SAASC,IAAI,IAAIP,YAAY,0FChCnDQ,UAAY,CACdC,KAAM,SAAAC,GAAI,OAAIA,GACdC,MAAO,SAAAD,GAAI,OAAIE,iBAAOF,EAAM,SAACG,GAAD,OAAOA,EAAEC,KAAKH,SAC1CI,MAAO,SAAAL,GAAI,OAAIE,iBAAOF,EAAM,SAACG,GAAD,OAAOA,EAAEC,KAAKC,SAC1CC,SAAU,SAAAN,GAAI,OAAIE,iBAAOF,EAAM,SAACG,GAAD,OAAOA,EAAEC,KAAKE,cAqElCC,EAlEM,SAAA3B,GAAkD,IAAhD4B,EAAgD5B,EAAhD4B,MAAOC,EAAyC7B,EAAzC6B,SAAUC,EAA+B9B,EAA/B8B,aAAcC,EAAiB/B,EAAjB+B,YAM5CC,GAJcF,GAA6B,aAAbD,EAChCX,EAAUW,GAAUD,GACpBV,EAAUW,GAAUD,GAAOK,WAEGC,OAAO,SAACC,GAEtC,OADwBA,EAAjBX,KAAOH,MACDe,cAAcC,SAASN,KAGxC,OACI5B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOhC,UAAU,QAAQiC,QAAM,GAC3BpC,EAAAC,EAAAC,cAACiC,EAAA,EAAME,OAAP,KACIrC,EAAAC,EAAAC,cAACiC,EAAA,EAAMG,IAAP,KACItC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,WACAvC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,cACAvC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,cACAvC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,cACAvC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,eAIRvC,EAAAC,EAAAC,cAACiC,EAAA,EAAMK,KAAP,KACKX,EAAcY,IAAI,SAACT,GAAS,IAClBX,EAAQW,EAARX,KACP,OACIrB,EAAAC,EAAAC,cAACiC,EAAA,EAAMG,IAAP,CAAWI,IAAKrB,EAAKsB,IACjB3C,EAAAC,EAAAC,cAACiC,EAAA,EAAMS,KAAP,KAAavB,EAAKsB,IAClB3C,EAAAC,EAAAC,cAACiC,EAAA,EAAMS,KAAP,KAAavB,EAAKH,OAClBlB,EAAAC,EAAAC,cAACiC,EAAA,EAAMS,KAAP,KACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACV0C,IAAKxB,EAAKyB,SACVC,IAAI,MAEb/C,EAAAC,EAAAC,cAACiC,EAAA,EAAMS,KAAP,KAAavB,EAAKC,OAClBtB,EAAAC,EAAAC,cAACiC,EAAA,EAAMS,KAAP,KAAavB,EAAKE,SAAlB,SAOhBvB,EAAAC,EAAAC,cAACiC,EAAA,EAAMa,OAAP,KACIhD,EAAAC,EAAAC,cAACiC,EAAA,EAAMG,IAAP,KACItC,EAAAC,EAAAC,cAACiC,EAAA,EAAMI,WAAP,CAAkBU,QAAQ,KACtBjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMC,QAAQ,QAAQC,YAAU,GAC5BpD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIhD,MAAI,GAClBN,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAMC,KAAK,kBAEfxD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,KAAd,KACAtD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,KAAd,KACAtD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,KAAd,KACAtD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,KAAd,KACAtD,EAAAC,EAAAC,cAACgD,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIhD,MAAI,GAClBN,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAMC,KAAK,yBCY5BC,sBAxEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTzC,MAAO,KACPC,SAAU,OACVC,cAAc,EACdC,YAAa,IAGjB+B,EAAKQ,SAAWR,EAAKQ,SAASC,KAAdR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAChBA,EAAK7D,WAAa6D,EAAK7D,WAAWsE,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAClBA,EAAK5D,cAAgB4D,EAAK5D,cAAcqE,KAAnBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAXNA,mFAefG,KAAKQ,kDAGI,IAAAC,EAAAT,KACTU,IAAM,CACFC,OAAQ,MACRC,IAAK,cACLC,QAAS,MAERC,KAAK,SAAAC,GAAM,OAAIN,EAAKJ,SAASU,EAAOxD,QACpCyD,MAAM,SAAAC,GAAK,OAAIR,EAAKS,SAAS,CAAED,6CAG/B1D,GACLyC,KAAKkB,SAAS3D,sCAGPK,GACPoC,KAAKkB,SAAS,CACVtD,WACAC,cAAemC,KAAKI,MAAMvC,wDAIG,IAAXsD,EAAWpF,EAArBqF,OAAUD,MAEtBnB,KAAKkB,SAAS,CACVpD,YAAaqD,qCAIZ,IAAAE,EACkDrB,KAAKI,MAApDzC,EADH0D,EACG1D,MAAOC,EADVyD,EACUzD,SAAUC,EADpBwD,EACoBxD,aAAcC,EADlCuD,EACkCvD,YACvC,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAELsB,EAEEzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAK4D,KAAKI,MAAMtC,aAChB5B,EAAAC,EAAAC,cAACkF,EAAD,CACItF,WAAYgE,KAAKhE,WACjBC,cAAe+D,KAAK/D,gBAExBC,EAAAC,EAAAC,cAACmF,EAAD,CACI5D,MAAOA,EACPC,SAAUA,EACVC,aAAcA,EACdC,YAAaA,KAXrB5B,EAAAC,EAAAC,cAAA,sEArDNoF,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.2cee2b47.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Input, Button } from 'semantic-ui-react'\r\nimport \"./Sort.css\";\r\n\r\nconst Sort = ({changeSort, onChangeInput}) => {\r\n    return(\r\n        <div className='Sort'>\r\n            <Input action={{ icon: 'search' }}\r\n                   placeholder='Поиск'\r\n                   className='Sort__search'\r\n                   onChange={(e) => onChangeInput(e)}\r\n            />\r\n            <div className='Sort__btn-group'>\r\n                <Button\r\n                    className='ui icon button'\r\n                    role='button'\r\n                    onClick={() => changeSort(\"title\")}\r\n                >\r\n                    <i className=\"sort alphabet down icon\"/>\r\n                </Button>\r\n                <Button\r\n                    className='ui icon button'\r\n                    role='button'\r\n                    onClick={() => changeSort(\"price\")}\r\n                >\r\n                    <i className=\"dollar sign icon\"/>\r\n                </Button>\r\n                <button\r\n                    className='ui icon button'\r\n                    role='button'\r\n                    onClick={() => changeSort(\"discount\")}\r\n                >\r\n                    <i className=\"percent icon\"/>\r\n                </button>\r\n            </div>\r\n            <div className='Sort__Range'>\r\n                <Input type='number' min='0' placeholder='мин (руб.)' />\r\n                <Input type='number' min='0' placeholder='макс (руб.)' />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sort;","import React from 'react';\r\nimport { sortBy } from 'lodash';\r\nimport {Icon, Menu, Table} from 'semantic-ui-react'\r\nimport './Table.css';\r\n\r\nconst sortGoods = {\r\n    none: list => list,\r\n    title: list => sortBy(list, (o) => o.data.title),\r\n    price: list => sortBy(list, (o) => o.data.price),\r\n    discount: list => sortBy(list, (o) => o.data.discount)\r\n};\r\n\r\nconst TableContent = ({goods, sortType, isReverseOff, searchValue}) => {\r\n\r\n    const sortedGoods = isReverseOff && sortType !== 'discount'?\r\n        sortGoods[sortType](goods) :\r\n        sortGoods[sortType](goods).reverse();\r\n\r\n    const filteredGoods = sortedGoods.filter((item) => {\r\n        const {data: {title}} = item;\r\n        return title.toLowerCase().includes(searchValue);\r\n    });\r\n\r\n    return (\r\n        <Table className='Table' celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>id</Table.HeaderCell>\r\n                    <Table.HeaderCell>title</Table.HeaderCell>\r\n                    <Table.HeaderCell>image</Table.HeaderCell>\r\n                    <Table.HeaderCell>price</Table.HeaderCell>\r\n                    <Table.HeaderCell>sale</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {filteredGoods.map((item) => {\r\n                    const {data} = item;\r\n                    return (\r\n                        <Table.Row key={data.id}>\r\n                            <Table.Cell>{data.id}</Table.Cell>\r\n                            <Table.Cell>{data.title}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <img className='Table__image'\r\n                                     src={data.base_url}\r\n                                     alt=''/>\r\n                            </Table.Cell>\r\n                            <Table.Cell>{data.price}</Table.Cell>\r\n                            <Table.Cell>{data.discount}%</Table.Cell>\r\n                        </Table.Row>\r\n                    );\r\n                })}\r\n\r\n            </Table.Body>\r\n\r\n            <Table.Footer>\r\n                <Table.Row>\r\n                    <Table.HeaderCell colSpan='5'>\r\n                        <Menu floated='right' pagination>\r\n                            <Menu.Item as='a' icon>\r\n                                <Icon name='chevron left'/>\r\n                            </Menu.Item>\r\n                            <Menu.Item as='a'>1</Menu.Item>\r\n                            <Menu.Item as='a'>2</Menu.Item>\r\n                            <Menu.Item as='a'>3</Menu.Item>\r\n                            <Menu.Item as='a'>4</Menu.Item>\r\n                            <Menu.Item as='a' icon>\r\n                                <Icon name='chevron right'/>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Footer>\r\n        </Table>\r\n    );\r\n}\r\n\r\n\r\nexport default TableContent;\r\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Sort from './components/Sort/Sort';\nimport Table from './components/Table/Table';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goods: null,\n            sortType: \"none\",\n            isReverseOff: true,\n            searchValue: \"\"\n        };\n\n        this.setGoods = this.setGoods.bind(this);\n        this.changeSort = this.changeSort.bind(this);\n        this.onChangeInput = this.onChangeInput.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchGoods();\n    }\n\n    fetchGoods() {\n        axios({\n            method: 'get',\n            url: './shop.json',\n            timeout: 10000\n        })\n            .then(result => this.setGoods(result.data))\n            .catch(error => this.setState({ error }))\n    }\n\n    setGoods(data) {\n        this.setState(data);\n    }\n\n    changeSort(sortType) {\n        this.setState({\n            sortType,\n            isReverseOff: !this.state.isReverseOff\n        });\n    }\n\n    onChangeInput( {target: { value }} ) {\n\n        this.setState({\n            searchValue: value\n        });\n    }\n\n    render() {\n        const { goods, sortType, isReverseOff, searchValue } = this.state;\n        return (\n            <div className='App'>\n                {\n                    (!goods)?\n                        <h1>Загрузка</h1>:\n                        <div>\n                            <h2>{this.state.searchValue}</h2>\n                            <Sort\n                                changeSort={this.changeSort}\n                                onChangeInput={this.onChangeInput}\n                            />\n                            <Table\n                                goods={goods}\n                                sortType={sortType}\n                                isReverseOff={isReverseOff}\n                                searchValue={searchValue}\n                            />\n                        </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}