{"version":3,"sources":["components/Sort/Sort.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Sort","react_default","a","createElement","className","Input","action","icon","placeholder","Button","role","type","min","Component","sortGoods","list","sortBy","o","data","discount","TableContent","_ref","goods","sortedGoods","sortType","console","log","Table","celled","Header","Row","HeaderCell","Body","map","item","key","id","Cell","title","src","base_url","alt","price","Footer","colSpan","Menu","floated","pagination","Item","as","Icon","name","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setGoods","bind","assertThisInitialized","fetchGoods","_this2","axios","method","url","timeout","then","result","catch","error","setState","_this$state","components_Sort_Sort","components_Table_Table","sotrType","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b80b04ec.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { Input, Button } from 'semantic-ui-react'\r\nimport \"./Sort.css\";\r\n\r\n\r\nclass Sort extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Sort'>\r\n                <Input action={{ icon: 'search' }} placeholder='Search...' className='Sort__search'/>\r\n                <div className='Sort__btn-group'>\r\n                    <Button className='ui icon button' role='button'>\r\n                        <i className=\"sort alphabet down icon\"/>\r\n                    </Button>\r\n                    <Button className='ui icon button' role='button'>\r\n                        <i className=\"dollar sign icon\"/>\r\n                    </Button>\r\n                    <button className='ui icon button' role='button'>\r\n                        <i className=\"percent icon\"/>\r\n                    </button>\r\n                </div>\r\n                <div className='Sort__Range'>\r\n                    <Input type='number' min='0' placeholder='мин (руб.)' />\r\n                    <Input type='number' min='0' placeholder='макс (руб.)' />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sort;","import React from 'react';\r\nimport { sortBy } from 'lodash';\r\nimport {Icon, Menu, Table} from 'semantic-ui-react'\r\nimport './Table.css';\r\n\r\nconst sortGoods = {\r\n    none: list => list,\r\n    title: list => sortBy(list, (o) => o.data.title),\r\n    price: list => sortBy(list, (o) => o.data.price),\r\n    discount: list => sortBy(list, (o) => o.data.discount)\r\n    // NUM_COMMENTS: list => sortBy(list, \"\")\r\n};\r\n\r\nconst TableContent = ({goods, sortType}) => {\r\n    const sortedGoods = sortGoods[\"discount\"](goods);\r\n    console.log(sortedGoods);\r\n    return (\r\n        <Table className='Table' celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>id</Table.HeaderCell>\r\n                    <Table.HeaderCell>title</Table.HeaderCell>\r\n                    <Table.HeaderCell>image</Table.HeaderCell>\r\n                    <Table.HeaderCell>price</Table.HeaderCell>\r\n                    <Table.HeaderCell>sale</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {sortedGoods.map((item) => {\r\n                    console.log(sortedGoods);\r\n                    const {data} = item;\r\n                    return (\r\n                        <Table.Row key={data.id}>\r\n                            <Table.Cell>{data.id}</Table.Cell>\r\n                            <Table.Cell>{data.title}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <img className='Table__image'\r\n                                     src={data.base_url}\r\n                                     alt=''/>\r\n                            </Table.Cell>\r\n                            <Table.Cell>{data.price}</Table.Cell>\r\n                            <Table.Cell>{data.discount}%</Table.Cell>\r\n                        </Table.Row>\r\n                    );\r\n                })}\r\n\r\n            </Table.Body>\r\n\r\n            <Table.Footer>\r\n                <Table.Row>\r\n                    <Table.HeaderCell colSpan='5'>\r\n                        <Menu floated='right' pagination>\r\n                            <Menu.Item as='a' icon>\r\n                                <Icon name='chevron left'/>\r\n                            </Menu.Item>\r\n                            <Menu.Item as='a'>1</Menu.Item>\r\n                            <Menu.Item as='a'>2</Menu.Item>\r\n                            <Menu.Item as='a'>3</Menu.Item>\r\n                            <Menu.Item as='a'>4</Menu.Item>\r\n                            <Menu.Item as='a' icon>\r\n                                <Icon name='chevron right'/>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Footer>\r\n        </Table>\r\n    );\r\n}\r\n\r\n\r\nexport default TableContent;\r\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Sort from './components/Sort/Sort';\nimport Table from './components/Table/Table';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goods: null,\n            sortType: 'none'\n        }\n\n        this.setGoods = this.setGoods.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchGoods();\n    }\n\n    fetchGoods() {\n        axios({\n            method: 'get',\n            url: './shop.json',\n            timeout: 10000\n        })\n            .then(result => this.setGoods(result.data))\n            .catch(error => this.setState({ error }))\n    }\n\n    setGoods(data) {\n        this.setState(data);\n    }\n\n    render() {\n        const { goods, sortType } = this.state;\n        return (\n            <div className='App'>\n                {\n                    (!goods)?\n                        <h1>Загрузка</h1>:\n                        <div>\n                            <Sort/>\n                            <Table\n                                goods={goods}\n                                sotrType={sortType}\n                            />\n                        </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}